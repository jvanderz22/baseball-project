{"version":3,"sources":["components/navbar/index.js","components/checkbox/index.js","services/stat-calculations/index.js","components/line-chart/index.js","services/data-operations/index.js","components/player-graph/index.js","components/player-table/index.js","components/player-view/index.js","routes/player/index.js","services/datasets/index.js","services/data/index.js","app/index.js","serviceWorker.js","index.js","components/line-chart/styles.scss"],"names":["Navbar","react_default","a","createElement","className","Checkbox","props","Object","assign","type","label","sumRow","games","field","reduce","sum","game","Number","calculateOnBasePercentage","calculateSluggingPercentage","sumRowByKey","key","COMPUTED_DATA_FIELDS","AVG","OBP","SLG","OPS","COUNTING_DATA_FIELDS","PA","AB","H","HR","BB","SO","HBP","SF","TB","RBI","DATA_FIELDS","objectSpread","DATA_FIELD_FUNC_MAP","calculateBattingAverage","toFixed","calculateOPS","STAT_COLOR_MAP","styles","blue","gray","orange","yellow","lightblue","green","red","darkblue","darkgray","darkyellow","darkorange","yellowgreen","bluegreen","brown","getComputedValueFromScaledValue","computedValue","maxCountedValue","LineChart","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleMouseOverPoint","debounce","activeCrosshair","setState","crosshairValue","handleMouseOutPoint","setChartWidth","element","offsetWidth","width","chartWidth","state","_this2","data","countedYValues","keys","arr","concat","map","computedYValues","hasCountedValues","length","hasComputedValues","maxComputedValue","max","maxChartValue","transformedData","obj","dataKey","dataValue","x","y","_i","_Object$keys","maxDataVal","maxBy","yDomain","ceil","tickTotal","computedAxisTicks","toConsumableArray","Array","index","transformedDataKeys","usedCountingStats","filter","usedComputedStats","countingStatsLabel","join","computedStatsLabel","chartKeys","ref","style","backgroundColor","es","height","xType","margin","left","top","right","bottom","dataValues","color","dataValuesWithLabel","timeframe","moment","format","displayValue","size","onValueMouseOver","onValueMouseOut","tickFormat","v","tickValues","text","includeMargin","xPercent","yPercent","values","transform","textAnchor","orientation","PureComponent","splitGamesByMonth","gamesByMonth","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","month","gameDate","push","err","return","Graph","_getMonthlyData","displayOptions","activeDataFields","pickBy","option","dataContainer","dataField","dateMonth","Date","_i2","_Object$keys2","monthlyDataFieldValue","handleOptionClick","e","currentTarget","dataset","defineProperty","monthlyData","line_chart","components_checkbox","checked","onChange","data-data-field","PlayerTable","react","valueFunc","PlayerView","handleSelectPlayer","newPlayerId","history","handleSelectView","_this$props","activePlayerId","players","selectedPlayer","fullName","src","imageSrc","alt","name","playerId","player","onClick","onKeyPress","player_graph","gameData","player_table","Component","PlayerRoute","react_router","path","render","player_view","match","params","to","datasets","EXPECTED_HEADER_ROW_ORDER","HEADER_KEY_MAPPING","playerImage","team","teamImage","opponent","opponentImage","K","readData","DATASETS","headers","rows","headerName","expectedHeader","errorMessage","Error","row","rowData","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","cellIndex","readPlayerGameData","header","playerData","playerGameData","id","playerGame","plateAppearances","atBats","hits","homeRuns","walks","strikeouts","hitByPitches","sacFlies","totalBases","rbi","replace","App","appData","navbar","react_router_dom","routes_player","Boolean","window","location","hostname","ReactDOM","app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.f0b86a27.chunk.js","sourcesContent":["// @flow\n\nimport React from 'react'\n\nimport './styles.scss'\n\nfunction Navbar() {\n  return (\n    <div className=\"navbar\">\n      <div className=\"navbar-header\">MLB Player Statistics</div>\n    </div>\n  )\n}\n\nexport default Navbar\n","// @flow\nimport React from 'react'\n\ntype Props = {\n  label: string,\n}\n\nfunction Checkbox(props: Props) {\n  return (\n    <label>\n      <input type=\"checkbox\" {...props} />\n      <span>{props.label}</span>\n    </label>\n  )\n}\n\nexport default Checkbox\n","// @flow\n\nimport { type GameData } from 'services/data'\n\nexport const sumRow = (\n  games: Array<GameData>,\n  field: $Keys<GameData>\n): number => {\n  return games.reduce((sum, game) => {\n    return Number((sum += game[field]))\n  }, 0)\n}\n\nexport const calculateBattingAverage = (games: Array<GameData>) => {\n  const hits = sumRow(games, 'hits')\n  const atBats = sumRow(games, 'atBats')\n  return hits / atBats\n}\n\nexport const calculateOnBasePercentage = (games: Array<GameData>) => {\n  const hits = sumRow(games, 'hits')\n  const walks = sumRow(games, 'walks')\n  const hitByPitches = sumRow(games, 'hitByPitches')\n  const plateAppearances = sumRow(games, 'plateAppearances')\n  return (hits + walks + hitByPitches) / plateAppearances\n}\n\nexport const calculateSluggingPercentage = (games: Array<GameData>) => {\n  const totalBases = sumRow(games, 'totalBases')\n  const plateAppearances = sumRow(games, 'plateAppearances')\n  return totalBases / plateAppearances\n}\n\nexport const calculateOPS = (games: Array<GameData>) => {\n  const sluggingPercentage = calculateSluggingPercentage(games)\n  const onBasePercentage = calculateOnBasePercentage(games)\n  return sluggingPercentage + onBasePercentage\n}\n\nconst sumRowByKey = (key: $Keys<GameData>) => (games: Array<GameData>) =>\n  sumRow(games, key)\n\nexport const COMPUTED_DATA_FIELDS = {\n  AVG: 'AVG',\n  OBP: 'OBP',\n  SLG: 'SLG',\n  OPS: 'OPS',\n}\n\nexport const COUNTING_DATA_FIELDS = {\n  PA: 'PA',\n  AB: 'AB',\n  H: 'H',\n  HR: 'HR',\n  BB: 'BB',\n  SO: 'SO',\n  HBP: 'HBP',\n  SF: 'SF',\n  TB: 'TB',\n  RBI: 'RBI',\n}\n\nexport const DATA_FIELDS = {\n  ...COMPUTED_DATA_FIELDS,\n  ...COUNTING_DATA_FIELDS,\n}\n\n/* Maps a data key to a function to calculate it for a set of games */\nexport const DATA_FIELD_FUNC_MAP = {\n  PA: sumRowByKey('plateAppearances'),\n  AB: sumRowByKey('atBats'),\n  H: sumRowByKey('hits'),\n  HR: sumRowByKey('homeRuns'),\n  SO: sumRowByKey('strikeouts'),\n  BB: sumRowByKey('walks'),\n  HBP: sumRowByKey('hitByPitches'),\n  SF: sumRowByKey('sacFlies'),\n  TB: sumRowByKey('totalBases'),\n  RBI: sumRowByKey('rbi'),\n  AVG: (games: Array<GameData>) => calculateBattingAverage(games).toFixed(3),\n  OBP: (games: Array<GameData>) => calculateOnBasePercentage(games).toFixed(3),\n  SLG: (games: Array<GameData>) =>\n    calculateSluggingPercentage(games).toFixed(3),\n  OPS: (games: Array<GameData>) => calculateOPS(games).toFixed(3),\n}\n","// @flow\n\nimport React, { PureComponent } from 'react'\nimport moment from 'moment'\nimport debounce from 'lodash/debounce'\nimport {\n  Crosshair,\n  ChartLabel,\n  XYPlot,\n  XAxis,\n  YAxis,\n  LineSeries,\n  MarkSeries,\n} from 'react-vis'\nimport map from 'lodash/map'\nimport max from 'lodash/max'\nimport maxBy from 'lodash/maxBy'\nimport ceil from 'lodash/ceil'\n\nimport {\n  COMPUTED_DATA_FIELDS,\n  COUNTING_DATA_FIELDS,\n} from 'services/stat-calculations'\n\nimport styles from './styles.scss'\n\ntype Props = {\n  data: Object,\n}\n\ntype CrosshairData = {\n  y: number,\n  x: number,\n  timeframe: string,\n  dataKey: string,\n  displayValue: string | number,\n}\n\ntype State = {\n  crosshairValue: ?CrosshairData,\n  chartWidth: number,\n}\n\nconst STAT_COLOR_MAP = {\n  AVG: styles.blue,\n  OBP: styles.gray,\n  SLG: styles.orange,\n  OPS: styles.yellow,\n  PA: styles.lightblue,\n  AB: styles.green,\n  H: styles.red,\n  HR: styles.darkblue,\n  BB: styles.darkgray,\n  SO: styles.darkyellow,\n  HBP: styles.darkorange,\n  SF: styles.yellowgreen,\n  TB: styles.bluegreen,\n  RBI: styles.brown,\n}\n\nconst getComputedValueFromScaledValue = (computedValue, maxCountedValue) => {\n  return (computedValue / maxCountedValue / 3).toFixed(3)\n}\n\nclass LineChart extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      crosshairValue: null,\n      chartWidth: 400,\n    }\n  }\n\n  handleMouseOverPoint = debounce((activeCrosshair: CrosshairData) => {\n    this.setState({\n      crosshairValue: activeCrosshair,\n    })\n  }, 150)\n\n  handleMouseOutPoint = debounce(() => {\n    this.setState({\n      crosshairValue: null,\n    })\n  }, 300)\n\n  setChartWidth = (element: ?HTMLDivElement) => {\n    if (element) {\n      const { offsetWidth } = element\n      const width = offsetWidth > 400 ? offsetWidth : 400\n      this.setState({\n        chartWidth: width,\n      })\n    }\n  }\n\n  render() {\n    const { data } = this.props\n    const { crosshairValue } = this.state\n\n    // Figure out the max Y values of the raw data passed to the component\n    const countedYValues = Object.keys(data).reduce((arr, key) => {\n      if (COUNTING_DATA_FIELDS[key]) {\n        return arr.concat(map(data[key], 'y'))\n      }\n      return arr\n    }, [])\n    const computedYValues = Object.keys(data).reduce((arr, key) => {\n      if (COMPUTED_DATA_FIELDS[key]) {\n        return arr.concat(map(data[key], 'y'))\n      }\n      return arr\n    }, [])\n    const hasCountedValues = countedYValues.length !== 0\n    const hasComputedValues = computedYValues.length !== 0\n    const maxComputedValue = max(computedYValues)\n    const maxCountedValue = max(countedYValues) || 1 / 3\n    let maxChartValue = maxCountedValue\n\n    // Transform the given data into renderable values scaled to the chart\n    const transformedData = Object.keys(data).reduce((obj, dataKey) => {\n      if (COMPUTED_DATA_FIELDS[dataKey]) {\n        obj[dataKey] = data[dataKey].map(dataValue => {\n          return { x: dataValue.x, y: dataValue.y * maxCountedValue * 3 }\n        })\n      } else {\n        obj[dataKey] = data[dataKey].map(dataValue => {\n          return { x: dataValue.x, y: dataValue.y }\n        })\n      }\n\n      return obj\n    }, {})\n\n    // Calculate the max Y value in the chart\n    for (const dataKey of Object.keys(transformedData)) {\n      const maxDataVal = maxBy(transformedData[dataKey], 'y').y\n      if (maxDataVal > maxChartValue) {\n        maxChartValue = maxDataVal\n      }\n    }\n\n    // Set the domain of the chart from 0 to the max value\n    const yDomain = hasCountedValues\n      ? [0, maxChartValue]\n      : [0, ceil(maxComputedValue, 1)]\n\n    // Figure out which ticks to include on the computed axis\n    const tickTotal = ceil(maxComputedValue, 1) / 0.1 + 1\n    let computedAxisTicks = []\n    if (tickTotal > 0) {\n      computedAxisTicks = [...Array(ceil(tickTotal, 1)).keys()].map(index => {\n        return index * 0.1 * maxCountedValue * 3\n      })\n    }\n\n    const transformedDataKeys = Object.keys(transformedData)\n    const usedCountingStats = transformedDataKeys.filter(\n      dataKey => !!COUNTING_DATA_FIELDS[dataKey]\n    )\n    const usedComputedStats = transformedDataKeys.filter(\n      dataKey => !!COMPUTED_DATA_FIELDS[dataKey]\n    )\n    const countingStatsLabel = usedCountingStats.join(' / ')\n    const computedStatsLabel = usedComputedStats.join(' / ')\n    const chartKeys = Object.keys(COMPUTED_DATA_FIELDS)\n      .concat(Object.keys(COUNTING_DATA_FIELDS))\n      .filter(dataKey => !!transformedData[dataKey])\n\n    return (\n      <div className=\"line-chart-container\" ref={this.setChartWidth}>\n        <div className=\"chart-key-container\">\n          {chartKeys.map(dataKey => {\n            return (\n              <div className=\"chart-key\" key={dataKey}>\n                <span\n                  style={{ backgroundColor: STAT_COLOR_MAP[dataKey] }}\n                  className=\"key-color\"\n                >\n                  {' '}\n                </span>\n                {dataKey}\n              </div>\n            )\n          })}\n        </div>\n        <XYPlot\n          width={this.state.chartWidth}\n          height={500}\n          xType=\"time\"\n          yDomain={yDomain}\n          margin={{\n            left: 75,\n            top: 10,\n            right: 75,\n            bottom: 100,\n          }}\n        >\n          {transformedDataKeys.map(dataKey => {\n            const dataValues = transformedData[dataKey]\n            return (\n              <LineSeries\n                key={dataKey}\n                data={dataValues}\n                color={STAT_COLOR_MAP[dataKey]}\n              />\n            )\n          })}\n          {Object.keys(transformedData).map(dataKey => {\n            const dataValues = transformedData[dataKey]\n            const dataValuesWithLabel = dataValues.map(dataValue => ({\n              ...dataValue,\n              x: Number(dataValue.x),\n              timeframe: moment(dataValue.x).format('MMMM YYYY'),\n              dataKey,\n              displayValue: COMPUTED_DATA_FIELDS[dataKey]\n                ? getComputedValueFromScaledValue(dataValue.y, maxCountedValue)\n                : dataValue.y,\n            }))\n\n            return (\n              <MarkSeries\n                key={dataKey}\n                data={dataValuesWithLabel}\n                size={5}\n                color={STAT_COLOR_MAP[dataKey]}\n                onValueMouseOver={this.handleMouseOverPoint}\n                onValueMouseOut={this.handleMouseOutPoint}\n              />\n            )\n          })}\n          <XAxis />\n          {hasComputedValues && (\n            <YAxis\n              tickFormat={v => {\n                return getComputedValueFromScaledValue(v, maxCountedValue)\n              }}\n              tickValues={computedAxisTicks}\n            />\n          )}\n          <ChartLabel\n            text=\"Month\"\n            className=\"line-chart-label\"\n            includeMargin={false}\n            xPercent={0.45}\n            yPercent={1.2}\n          />\n          <Crosshair\n            values={[crosshairValue]}\n            style={{ color: 'black' }}\n            color=\"black\"\n          >\n            {crosshairValue && (\n              <div className=\"crosshair\">\n                <div>{crosshairValue.timeframe}</div>\n                <div>{crosshairValue.dataKey}</div>\n                <div>{crosshairValue.displayValue}</div>\n              </div>\n            )}\n          </Crosshair>\n          {hasComputedValues && (\n            <ChartLabel\n              text={computedStatsLabel}\n              className=\"line-chart-label\"\n              includeMargin={false}\n              xPercent={-0.11}\n              yPercent={0.5 - computedStatsLabel.length * 0.0075}\n              style={{\n                transform: 'rotate(-90)',\n                textAnchor: 'end',\n              }}\n            />\n          )}\n          {hasCountedValues && (\n            <ChartLabel\n              text={countingStatsLabel}\n              className=\"line-chart-label\"\n              includeMargin={false}\n              xPercent={hasComputedValues ? 1.11 : -0.11}\n              yPercent={0.5 - countingStatsLabel.length * 0.0075}\n              style={{\n                transform: 'rotate(-90)',\n                textAnchor: 'end',\n              }}\n            />\n          )}\n          {hasCountedValues && (\n            <YAxis orientation={hasComputedValues ? 'right' : 'left'} />\n          )}\n        </XYPlot>\n      </div>\n    )\n  }\n}\n\nexport default LineChart\n","export const splitGamesByMonth = games => {\n  const gamesByMonth = {}\n  for (const game of games) {\n    const month = game.gameDate.format('MMMM YYYY')\n    if (gamesByMonth[month]) {\n      gamesByMonth[month].push(game)\n    } else {\n      gamesByMonth[month] = [game]\n    }\n  }\n  return gamesByMonth\n}\n","// @flow\n\nimport React, { PureComponent } from 'react'\nimport pickBy from 'lodash/pickBy'\n\nimport Checkbox from 'components/checkbox'\nimport LineChart from 'components/line-chart'\nimport { type GameData } from 'services/data'\nimport { splitGamesByMonth } from 'services/data-operations'\nimport {\n  COMPUTED_DATA_FIELDS,\n  COUNTING_DATA_FIELDS,\n  DATA_FIELD_FUNC_MAP,\n} from 'services/stat-calculations'\n\nimport './styles.scss'\n\ntype Props = {\n  games: Array<GameData>,\n}\n\ntype DataKey =\n  | $Keys<typeof COMPUTED_DATA_FIELDS>\n  | $Keys<typeof COUNTING_DATA_FIELDS>\n\ntype State = {\n  displayOptions: {\n    [DataKey]: boolean,\n  },\n}\n\nclass Graph extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      displayOptions: {\n        AVG: true,\n      },\n    }\n  }\n\n  _getMonthlyData = (): { [DataKey]: Array<{ x: Date, y: number }> } => {\n    const { displayOptions } = this.state\n    const activeDataFields = pickBy(displayOptions, option => option === true)\n    const dataContainer = Object.keys(activeDataFields).reduce(\n      (data, dataField) => {\n        data[dataField] = []\n        return data\n      },\n      {}\n    )\n    const gamesByMonth = splitGamesByMonth(this.props.games)\n    for (const month of Object.keys(gamesByMonth)) {\n      const games = gamesByMonth[month]\n      const dateMonth = new Date(month)\n      for (const dataField of Object.keys(dataContainer)) {\n        const monthlyDataFieldValue = DATA_FIELD_FUNC_MAP[dataField](games)\n        dataContainer[dataField].push({\n          x: dateMonth,\n          y: monthlyDataFieldValue,\n        })\n      }\n    }\n    return dataContainer\n  }\n\n  handleOptionClick = (e: SyntheticEvent<HTMLInputElement>) => {\n    const { dataField } = e.currentTarget.dataset\n    if (COMPUTED_DATA_FIELDS[dataField] || COUNTING_DATA_FIELDS[dataField]) {\n      this.setState({\n        displayOptions: {\n          ...this.state.displayOptions,\n          [dataField]: !this.state.displayOptions[dataField],\n        },\n      })\n    }\n  }\n\n  render() {\n    const { displayOptions } = this.state\n    const monthlyData = this._getMonthlyData()\n    return (\n      <div className=\"player-graph-container\">\n        <div className=\"chart-container\">\n          <LineChart data={monthlyData} />\n        </div>\n        <div className=\"graph-options-container\">\n          <div className=\"graph-options-label\">Graph Options</div>\n          <div className=\"graph-options-subsection-container\">\n            <div className=\"graph-options-subsection-label\">\n              Counting Stats Options:\n            </div>\n            <div className=\"graph-options-checkbox-container\">\n              {Object.keys(COMPUTED_DATA_FIELDS).map(dataField => {\n                return (\n                  <div className=\"option-checkbox-container\" key={dataField}>\n                    <Checkbox\n                      checked={!!displayOptions[dataField]}\n                      label={dataField}\n                      onChange={this.handleOptionClick}\n                      data-data-field={dataField}\n                    />\n                  </div>\n                )\n              })}\n            </div>\n          </div>\n          <div className=\"graph-options-subsection-container\">\n            <div className=\"graph-options-subsection-label\">\n              Computed Stats Options:\n            </div>\n            <div className=\"graph-options-checkbox-container\">\n              {Object.keys(COUNTING_DATA_FIELDS).map(dataField => {\n                return (\n                  <div className=\"option-checkbox-container\" key={dataField}>\n                    <Checkbox\n                      checked={!!displayOptions[dataField]}\n                      label={dataField}\n                      onChange={this.handleOptionClick}\n                      data-data-field={dataField}\n                    />\n                  </div>\n                )\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Graph\n","// @flow\n\nimport React, { PureComponent, Fragment } from 'react'\n\nimport { type GameData } from 'services/data'\nimport { splitGamesByMonth } from 'services/data-operations'\nimport { DATA_FIELDS, DATA_FIELD_FUNC_MAP } from 'services/stat-calculations'\n\nimport './styles.scss'\n\ntype Props = {\n  games: Array<GameData>,\n}\n\nclass PlayerTable extends PureComponent<Props> {\n  render() {\n    const gamesByMonth = splitGamesByMonth(this.props.games)\n    return (\n      <Fragment>\n        <table className=\"player-data-table\">\n          <thead>\n            <tr>\n              <th className=\"month-table-data\"> Month </th>\n              {Object.keys(DATA_FIELDS).map(dataField => (\n                <th key={dataField}>{dataField} </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {Object.keys(gamesByMonth).map(month => {\n              const games = gamesByMonth[month]\n              return (\n                <tr key={month}>\n                  <td className=\"month-table-data\"> {month} </td>\n                  {Object.keys(DATA_FIELDS).map(dataField => {\n                    const valueFunc = DATA_FIELD_FUNC_MAP[dataField]\n                    const value = valueFunc(games)\n                    return <td key={dataField}>{value}</td>\n                  })}\n                </tr>\n              )\n            })}\n            <tr className=\"total-data-row\">\n              <td className=\"month-table-data\"> Total </td>\n              {Object.keys(DATA_FIELDS).map(dataField => {\n                const valueFunc = DATA_FIELD_FUNC_MAP[dataField]\n                const value = valueFunc(this.props.games)\n                return <td key={dataField}>{value}</td>\n              })}\n            </tr>\n          </tbody>\n        </table>\n      </Fragment>\n    )\n  }\n}\n\nexport default PlayerTable\n","// @flow\n\nimport React, { Component } from 'react'\n\nimport PlayerGraph from 'components/player-graph'\nimport PlayerTable from 'components/player-table'\nimport { type PlayerData } from 'services/data'\n\nimport './styles.scss'\n\ntype Props = {\n  players: PlayerData,\n  activePlayerId: string,\n  history: {\n    push: (newUrl: string) => void,\n  },\n}\n\ntype State = {\n  displayValue: 'Graph' | 'Table',\n}\n\nclass PlayerView extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      displayValue: 'Table',\n    }\n  }\n\n  handleSelectPlayer = (e: SyntheticEvent<HTMLSelectElement>) => {\n    const newPlayerId = e.currentTarget.value\n    this.props.history.push(`/players/${newPlayerId}`)\n  }\n\n  handleSelectView = (e: SyntheticEvent<HTMLButtonElement>) => {\n    const { value } = e.currentTarget\n    if (value === 'Graph' || value === 'Table') {\n      this.setState({\n        displayValue: value,\n      })\n    }\n  }\n\n  render() {\n    const { activePlayerId, players } = this.props\n    const { displayValue } = this.state\n    const selectedPlayer = players[activePlayerId]\n    return (\n      <div className=\"player-view-container\">\n        <div className=\"player-view-header\">\n          <div className=\"player-info-container\">\n            <div className=\"player-name\">{selectedPlayer.fullName}</div>\n            <div>\n              <img src={selectedPlayer.imageSrc} alt=\"\" />\n            </div>\n          </div>\n          <div className=\"player-select-container\">\n            <select\n              name=\"Select a player\"\n              value={activePlayerId}\n              onChange={this.handleSelectPlayer}\n            >\n              {Object.keys(players).map(playerId => {\n                const player = players[playerId]\n                return (\n                  <option key={playerId} value={playerId}>\n                    {player.fullName}\n                  </option>\n                )\n              })}\n            </select>\n          </div>\n        </div>\n        <div className=\"player-data-container\">\n          <div className=\"player-data-display-options-container\">\n            <div className=\"display-view-radio-container\">\n              <button\n                className={\n                  'radio-button ' + (displayValue === 'Table' ? 'active' : '')\n                }\n                value=\"Table\"\n                onClick={this.handleSelectView}\n                onKeyPress={this.handleSelectView}\n              >\n                Table\n              </button>\n              <button\n                className={\n                  'radio-button ' + (displayValue === 'Graph' ? 'active' : '')\n                }\n                value=\"Graph\"\n                onClick={this.handleSelectView}\n                onKeyPress={this.handleSelectView}\n              >\n                Graph\n              </button>\n            </div>\n          </div>\n          <div className=\"display-container\">\n            {displayValue === 'Graph' && (\n              <PlayerGraph games={players[activePlayerId].gameData} />\n            )}\n            {displayValue === 'Table' && (\n              <PlayerTable games={players[activePlayerId].gameData} />\n            )}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default PlayerView\n","import React from 'react'\n\nimport { Route, Switch, Redirect } from 'react-router-dom'\n\nimport PlayerView from 'components/player-view'\n\nfunction PlayerRoute(props) {\n  const { players } = props\n  return (\n    <Switch>\n      <Route\n        path=\"/players/:playerId\"\n        render={props => (\n          <PlayerView\n            players={players}\n            history={props.history}\n            activePlayerId={props.match.params.playerId}\n          />\n        )}\n      />\n      <Redirect to={`/players/${Object.keys(props.players)[0]}`} />\n    </Switch>\n  )\n}\n\nexport default PlayerRoute\n","import dataset1 from 'datasets/mlb-543063.json'\nimport dataset2 from 'datasets/mlb-547180.json'\nimport dataset3 from 'datasets/mlb-605137.json'\n\nexport default [dataset1, dataset2, dataset3]\n","// @flow\n\nimport moment from 'moment'\nimport DATASETS from 'services/datasets'\n\nexport type PlayerGameData = {\n  id: string,\n  fullName: string,\n  imageSrc: string,\n  gameDate: string,\n  team: string,\n  teamImage: string,\n  opponent: string,\n  opponentImage: string,\n  plateAppearances: number,\n  atBats: number,\n  hits: number,\n  homeRuns: number,\n  walks: number,\n  strikeouts: number,\n  hitByPitches: number,\n  sacFlies: number,\n  totalBases: number,\n  rbi: number,\n}\n\nexport type GameData = {\n  gameDate: string,\n  team: string,\n  teamImage: string,\n  opponent: string,\n  opponentImage: string,\n  plateAppearances: number,\n  atBats: number,\n  hits: number,\n  homeRuns: number,\n  walks: number,\n  strikeouts: number,\n  hitByPitches: number,\n  sacFlies: number,\n  totalBases: number,\n  rbi: number,\n}\n\nconst EXPECTED_HEADER_ROW_ORDER = [\n  'playerId',\n  'fullName',\n  'playerImage',\n  'gameDate',\n  'team',\n  'teamImage',\n  'opponent',\n  'opponentImage',\n  'PA',\n  'AB',\n  'H',\n  'HR',\n  'BB',\n  'K',\n  'HBP',\n  'SF',\n  'TB',\n  'RBI',\n]\n\nconst HEADER_KEY_MAPPING = {\n  playerId: 'id',\n  fullName: 'fullName',\n  playerImage: 'imageSrc',\n  gameDate: 'gameDate',\n  team: 'team',\n  teamImage: 'teamImageSrc',\n  opponent: 'opponent',\n  opponentImage: 'opponentImageSrc',\n  PA: 'plateAppearances',\n  AB: 'atBats',\n  H: 'hits',\n  HR: 'homeRuns',\n  BB: 'walks',\n  K: 'strikeouts',\n  HBP: 'hitByPitches',\n  SF: 'sacFlies',\n  TB: 'totalBases',\n  RBI: 'rbi',\n}\n\nconst readPlayerGameData = (headers, rows): PlayerGameData => {\n  for (const index of headers.keys()) {\n    const headerName = headers[index].label\n    const expectedHeader = EXPECTED_HEADER_ROW_ORDER[index]\n    if (headerName !== expectedHeader) {\n      const errorMessage = `Unexpected header at index ${index}. Header was ${headerName} but expected ${expectedHeader}`\n      throw new Error(errorMessage)\n    }\n  }\n  return rows.map(row => {\n    const rowData = {}\n    for (const cellIndex of row.keys()) {\n      const dataKey = HEADER_KEY_MAPPING[EXPECTED_HEADER_ROW_ORDER[cellIndex]]\n      const data = row[cellIndex]\n      rowData[dataKey] = data\n    }\n    return rowData\n  })\n}\n\nexport type PlayerData = {\n  [playerId: string]: {\n    id: string,\n    fullName: string,\n    imageSrc: string,\n    gameData: Array<GameData>,\n  },\n}\n\nexport type AppData = {\n  players: PlayerData,\n}\n\nexport const readData = (): AppData => {\n  const playerGameData = DATASETS.map(dataset =>\n    readPlayerGameData(dataset.header, dataset.rows)\n  )\n  const players = playerGameData.reduce((playerData, playerGameData) => {\n    const game = playerGameData[0]\n    const { id, fullName, imageSrc } = game\n    const gameData = playerGameData.map(playerGame => ({\n      gameDate: moment(playerGame.gameDate),\n      team: playerGame.team,\n      teamImage: playerGame.teamImage,\n      opponent: playerGame.opponent,\n      opponentImage: playerGame.opponentImage,\n      plateAppearances: playerGame.plateAppearances,\n      atBats: playerGame.atBats,\n      hits: playerGame.hits,\n      homeRuns: playerGame.homeRuns,\n      walks: playerGame.walks,\n      strikeouts: playerGame.strikeouts,\n      hitByPitches: playerGame.hitByPitches,\n      sacFlies: playerGame.sacFlies,\n      totalBases: playerGame.totalBases,\n      rbi: playerGame.rbi,\n    }))\n\n    playerData[id] = {\n      id,\n      fullName,\n      imageSrc: imageSrc.replace('https', 'http'),\n      gameData,\n    }\n    return playerData\n  }, {})\n  return {\n    players,\n  }\n}\n","// @flow\n\nimport React, { Component } from 'react'\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect,\n} from 'react-router-dom'\n\nimport Navbar from 'components/navbar'\nimport PlayerRoute from 'routes/player'\nimport { readData, type AppData } from 'services/data'\n\nimport './styles.scss'\n\ntype Props = {}\ntype State = {\n  appData: AppData,\n}\n\nclass App extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    const appData = readData()\n    this.state = {\n      appData,\n    }\n  }\n\n  render() {\n    const { appData } = this.state\n    return (\n      <div className=\"App\">\n        <Navbar />\n        <div className=\"body\">\n          <div className=\"content-container\">\n            <Router>\n              <Switch>\n                <Route\n                  path=\"/players/\"\n                  render={() => <PlayerRoute players={appData.players} />}\n                />\n                <Redirect to=\"/players\" />\n              </Switch>\n            </Router>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './app'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blue\":\"#4484ce\",\"gray\":\"#d9d9d9\",\"orange\":\"#f19f4d\",\"yellow\":\"#f9cf00\",\"lightblue\":\"#bdd4ee\",\"darkblue\":\"#193a60\",\"darkgray\":\"#8d8d8d\",\"darkorange\":\"#99530c\",\"darkyellow\":\"#605000\",\"bluegreen\":\"#1dbab4\",\"green\":\"#0c755b\",\"red\":\"#ff3a22\",\"yellowgreen\":\"#9cb700\",\"brown\":\"#9f8370\"};"],"sourceRoot":""}